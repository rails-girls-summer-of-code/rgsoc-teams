= simple_fields_for (student || Student.new), index: student.id.to_i do |s|

  - unless student.confirmed?
    .has-error
      .help-block
        p This person hasn't confirmed the email address. You can't submit your application till it is confirmed.

  h2 Basics
  = s.input :name, hint: 'Please provide your first and last name.', input_html: { disabled: !may_edit?(s.object) }
  .form-inline
    = s.input :application_age, :collection => ApplicationDraft::AGE, include_blank: true, disabled: !may_edit?(s.object), wrapper_html: { class: student_field_error_class(index, application_draft, :application_age)}, hint: student_field_error_hint(index, application_draft, :application_age)
  = private_application_data(student) do
    = s.input :application_gender_identification, as: :string, input_html: { disabled: !may_edit?(s.object), "data-genders-src" => ApplicationDraft::GENDER_LIST.to_json, class: "gender-form-field"}, wrapper_html: { class: student_field_error_class(index, application_draft, :application_gender_identification) }, hint: (student_field_error_hint(index, application_draft, :application_gender_identification) ||  'No-one is excluded from applying on the basis of gender, but people who self-identify as female, or have experiences being socialized as female, are given preference during selection.')
  = s.input :application_diversity, as: :character_limited, input_html: { disabled: !may_edit?(s.object) }, wrapper_html: { class: student_field_error_class(index, application_draft, :application_diversity) }, hint: (student_field_error_hint(index, application_draft, :application_diversity) || 'E.g., LGBTQI, people of color, people with disabilities, single parents, people taking care of family members, etc.')
  = s.input :application_location, as: :city, input_html: { disabled: !may_edit?(s.object) }, wrapper_html: { class: student_field_error_class(index, application_draft, :application_location) }, hint: student_field_error_hint(index, application_draft, :application_location)


  h2 Background Information

  = s.input :application_about, as: :character_limited, input_html: { rows: 5, disabled: !may_edit?(s.object) }, wrapper_html: { class: student_field_error_class(index, application_draft, :application_about)}, hint: (student_field_error_hint(index, application_draft, :application_about) || 'Only share what you feel comfortable with.')
  = s.input :application_code_background, as: :character_limited, input_html: {rows: 5, disabled: !may_edit?(s.object) }, wrapper_html: { class: student_field_error_class(index, application_draft, :application_code_background)}, hint: (student_field_error_hint(index, application_draft, :application_code_background) || 'Did it happen deliberately or by chance?' )

  h2 Community Involvement

  = s.input :application_community_engagement, as: :character_limited, input_html: { disabled: !may_edit?(s.object) }, wrapper_html: { class: student_field_error_class(index, application_draft, :application_community_engagement) }, hint: (student_field_error_hint(index, application_draft, :application_community_engagement) || 'Did you attend Rails Girls, RailsBridge, Black Girls Code, PyLadies, or a similar workshop? Were you involved in organization/coaching/study groups? Tell us all about it!')
  = s.input :application_giving_back, as: :character_limited, input_html: { disabled: !may_edit?(s.object) }, wrapper_html: { class: student_field_error_class(index, application_draft, :application_giving_back) }, hint: (student_field_error_hint(index, application_draft, :application_giving_back) || 'E.g., becoming a coach, maybe a regular committer, etc.')

  hr
  h2 Your programming skills

  p.alert.alert-info
    strong Note:
    |  The answers to the questions in this section of the application form will be visible to the project maintainers of the projects you are applying for.

  = s.input :application_skills, as: :character_limited, input_html: { disabled: !may_edit?(s.object) }, wrapper_html: { class: student_field_error_class(index, application_draft, :application_skills) }, hint: (student_field_error_hint(index, application_draft, :application_skills) || 'What languages, frameworks, and tech tools did you learn? What did you build?')

  h4 = t('simple_form.labels.student.application_coding_level')
  p.help-block For each level, assume that the guidelines of the level(s) below it are also true, meaning that if you see yourself as a Level 2, you should be able to do most of Level 1, too.
  div class="#{student_field_error_class(index, application_draft, :application_coding_level)}"
    .form-inline
      - SkillLevel.each do |level, explanations|
        .radio
          = s.radio_button :application_coding_level, level, disabled: !may_edit?(s.object)
        label
          | Skill Level #{level}
        ul
         - explanations.each do |l|
          li #{l}
    .help-block
      = student_field_error_hint(index, application_draft, :application_coding_level)
  .form-inline
    = s.input :application_language_learning_period, :collection => ApplicationDraft::MONTHS_LEARNING, include_blank: true, disabled: !may_edit?(s.object), wrapper_html: { class: student_field_error_class(index, application_draft, :application_language_learning_period)}, hint: student_field_error_hint(index, application_draft, :application_language_learning_period)

  = s.input :application_learning_history, as: :character_limited, input_html: { disabled: !may_edit?(s.object) }, wrapper_html: { class: student_field_error_class(index, application_draft, :application_learning_history) }, hint: (student_field_error_hint(index, application_draft, :application_learning_history) || 'E.g., entered a study group, learned Rails by doing exercises, etc.')

  = s.input :application_code_samples, as: :character_limited, input_html: { rows: 4, disabled: !may_edit?(s.object) }, wrapper_html: { class: student_field_error_class(index, application_draft, :application_code_samples) }, hint: (student_field_error_hint(index, application_draft, :application_code_samples) || 'E.g., links to completed coding challenge provided by the mentor (if present), commits or pull requests on Github or other concise examples of your code. Links to GitHub profiles and repositories won\'t be considered. Please do not directly copy-paste code here.')

  hr

  h2 Your goals and motivation

  = s.input :application_goals, as: :character_limited, input_html: { rows: 4, disabled: !may_edit?(s.object) }, wrapper_html: { class: student_field_error_class(index, application_draft, :application_goals) }, hint: (student_field_error_hint(index, application_draft, :application_goals) || "E.g., programming-related skills you want to have acquired, but also in a more general sense." )

  = s.input :application_motivation, as: :character_limited, input_html: { rows: 10, disabled: !may_edit?(s.object) }, wrapper_html: { class: student_field_error_class(index, application_draft, :application_motivation)}, hint: (student_field_error_hint(index, application_draft, :application_motivation) || "Write a short essay explaining your motivation.")

  h2 Financial matters
  = private_application_data(student) do
    = s.input :application_money, collection: (200..1500).step(50).entries + ['1500+'], input_html: { disabled: !may_edit?(s.object) }, wrapper_html: { class: student_field_error_class(index, application_draft, :application_money)}, hint: (student_field_error_hint(index, application_draft, :application_money) || "Double-check your selection by using #{link_to 'this cost of living calculator', 'http://www.numbeo.com/cost-of-living/', target: :blank}. If you need more than $1500/month, let us know so below.".html_safe)
    = s.input :application_minimum_money, as: :text, input_html: { rows: 4, disabled: !may_edit?(s.object) }, wrapper_html: { class: student_field_error_class(index, application_draft, :application_minimum_money)}, hint: (student_field_error_hint(index, application_draft, :application_minimum_money) || 'The total of the stipend will be decided on a case-by-case basis, taking into consideration data from the world bank plus individual living situations.')
